{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\WebstormProjects\\\\jsProjects\\\\new-to-do\\\\src\\\\components\\\\app\\\\component.tsx\";\nimport React from 'react';\nimport { AppHeader } from '../app-header/app-header';\nimport { ItemStatusFilter } from '../item-status-filter/component';\nimport { SearchPanel } from '../search-panel';\nimport { ItemAddForm } from \"../item-add-form\";\nimport { TodoList } from \"../todo-list\";\nexport class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.deleteItem = id => {\n      this.setState(({\n        toDoData\n      }) => {\n        return {\n          toDoData: toDoData.filter(element => element.id !== id)\n        };\n      });\n    };\n\n    this.onSearchChange = () => this.setState({});\n\n    this.onFilterChange = filter => this.setState({\n      filter\n    });\n  }\n\n  //  maxId: number = 100;\n  // createTodoItem = (label: string): IToDoItem => ({\n  //     label,\n  //     important: false,\n  //     done: false,\n  //     id: this.maxId++\n  // });\n  // state: IState = {\n  //     toDoData: [\n  //         this.createTodoItem('Setup React project ToDo List'),\n  //         this.createTodoItem('Rewrite ToDo list with typescript'),\n  //         this.createTodoItem('Create tests with Jest and Enzyme'),\n  //     ],\n  //     filter: 'active',\n  // };\n  // onAddItem = (text: string): void => {\n  //     const newItem = this.createTodoItem(text);\n  //\n  //     this.setState(({ toDoData }) => {\n  //         return {\n  //             toDoData: [newItem, ...toDoData]\n  //         }\n  //     });\n  // };\n  // onToggleImportant = (id: string): void => this.setState( ({ toDoData }) => ({\n  //     toDoData: this.toggleProperty(toDoData, id, 'important'),\n  // }));\n  filter(items, filter) {\n    switch (filter) {\n      case 'active':\n        return items.filter(item => !item.done);\n\n      case 'done':\n        return items.filter(item => item.done);\n\n      case 'all':\n      default:\n        return items;\n    }\n  }\n\n  search(items, term) {\n    return items.filter(item => {\n      if (term.length === 0) {\n        return items;\n      }\n\n      return item.label.toLowerCase().indexOf(term.toLowerCase()) > -1;\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          toDoData = _this$state.toDoData,\n          filter = _this$state.filter; // const visibleItems: IToDoItem[] = this.filter( this.search(toDoData, ''), filter);\n\n    const doneCount = toDoData.filter(element => element.done).length;\n    const toDoCount = toDoData.length - doneCount;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(AppHeader, {\n      toDo: toDoCount,\n      done: doneCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(SearchPanel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(ItemStatusFilter, {\n      filter: filter,\n      onFilterChange: this.onFilterChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(ItemAddForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(TodoList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }));\n  }\n\n} //onAddItem={this.onAddItem}","map":{"version":3,"sources":["C:/Users/user/WebstormProjects/jsProjects/new-to-do/src/components/app/component.tsx"],"names":["React","AppHeader","ItemStatusFilter","SearchPanel","ItemAddForm","TodoList","App","Component","deleteItem","id","setState","toDoData","filter","element","onSearchChange","onFilterChange","items","item","done","search","term","length","label","toLowerCase","indexOf","render","state","doneCount","toDoCount"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,WAAT,QAA4B,iBAA5B;AAEA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAAQC,QAAR,QAAuB,cAAvB;AAEA,OAAO,MAAMC,GAAN,SAAkBN,KAAK,CAACO,SAAxB,CAAqD;AAAA;AAAA;;AAAA,SA2DxDC,UA3DwD,GA2DzCC,EAAF,IAA0B;AACnC,WAAKC,QAAL,CAAc,CAAE;AAAEC,QAAAA;AAAF,OAAF,KAAoB;AAC9B,eAAO;AAAEA,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,MAAT,CAAkBC,OAAF,IAA0BA,OAAO,CAACJ,EAAR,KAAeA,EAAzD;AAAZ,SAAP;AACH,OAFD;AAGH,KA/DuD;;AAAA,SAwFxDK,cAxFwD,GAwFvC,MAAY,KAAKJ,QAAL,CAAc,EAAd,CAxF2B;;AAAA,SA0FxDK,cA1FwD,GA0FtCH,MAAD,IAA0B,KAAKF,QAAL,CAAc;AAAEE,MAAAA;AAAF,KAAd,CA1Fa;AAAA;;AAE1D;AAEE;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEAA,EAAAA,MAAM,CAACI,KAAD,EAAsBJ,MAAtB,EAAoD;AACtD,YAAQA,MAAR;AACI,WAAK,QAAL;AACI,eAAOI,KAAK,CAACJ,MAAN,CAAcK,IAAD,IAAqB,CAACA,IAAI,CAACC,IAAxC,CAAP;;AAEJ,WAAK,MAAL;AACI,eAAOF,KAAK,CAACJ,MAAN,CAAcK,IAAD,IAAqBA,IAAI,CAACC,IAAvC,CAAP;;AAEJ,WAAK,KAAL;AACA;AACI,eAAOF,KAAP;AATR;AAWH;;AAEDG,EAAAA,MAAM,CAACH,KAAD,EAAqBI,IAArB,EAAgD;AAClD,WAAOJ,KAAK,CAACJ,MAAN,CAAcK,IAAD,IAAqB;AACjC,UAAIG,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACnB,eAAOL,KAAP;AACH;;AAED,aAAOC,IAAI,CAACK,KAAL,CAAWC,WAAX,GAAyBC,OAAzB,CAAiCJ,IAAI,CAACG,WAAL,EAAjC,IAAuD,CAAC,CAA/D;AACH,KANE,CAAP;AAQH;;AAmCDE,EAAAA,MAAM,GAAgB;AAAA,wBACW,KAAKC,KADhB;AAAA,UACVf,QADU,eACVA,QADU;AAAA,UACAC,MADA,eACAA,MADA,EAGlB;;AAEA,UAAMe,SAAS,GAAGhB,QAAQ,CAACC,MAAT,CAAgBC,OAAO,IAAIA,OAAO,CAACK,IAAnC,EAAyCG,MAA3D;AAEA,UAAMO,SAAiB,GAAGjB,QAAQ,CAACU,MAAT,GAAkBM,SAA5C;AAEA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAEC,SAAjB;AAA4B,MAAA,IAAI,EAAED,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,gBAAD;AACI,MAAA,MAAM,EAAEf,MADZ;AAEI,MAAA,cAAc,EAAE,KAAKG,cAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAOI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,EAQI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,CADJ;AAYH;;AAjHuD,C,CAmH5D","sourcesContent":["import React from 'react';\r\nimport { AppHeader } from '../app-header/app-header'\r\nimport { ItemStatusFilter } from '../item-status-filter/component';\r\nimport { SearchPanel } from '../search-panel';\r\nimport { IToDoItem, IState } from './app-types';\r\nimport { ItemAddForm } from \"../item-add-form\";\r\nimport {TodoList} from \"../todo-list\";\r\n\r\nexport class App extends React.Component<IToDoItem, IState> {\r\n\r\n  //  maxId: number = 100;\r\n\r\n    // createTodoItem = (label: string): IToDoItem => ({\r\n    //     label,\r\n    //     important: false,\r\n    //     done: false,\r\n    //     id: this.maxId++\r\n    // });\r\n\r\n    // state: IState = {\r\n    //     toDoData: [\r\n    //         this.createTodoItem('Setup React project ToDo List'),\r\n    //         this.createTodoItem('Rewrite ToDo list with typescript'),\r\n    //         this.createTodoItem('Create tests with Jest and Enzyme'),\r\n    //     ],\r\n    //     filter: 'active',\r\n    // };\r\n\r\n    // onAddItem = (text: string): void => {\r\n    //     const newItem = this.createTodoItem(text);\r\n    //\r\n    //     this.setState(({ toDoData }) => {\r\n    //         return {\r\n    //             toDoData: [newItem, ...toDoData]\r\n    //         }\r\n    //     });\r\n    // };\r\n\r\n    // onToggleImportant = (id: string): void => this.setState( ({ toDoData }) => ({\r\n    //     toDoData: this.toggleProperty(toDoData, id, 'important'),\r\n    // }));\r\n\r\n    filter(items : IToDoItem[], filter: string) : IToDoItem[] {\r\n        switch (filter) {\r\n            case 'active':\r\n                return items.filter((item: IToDoItem) => !item.done);\r\n\r\n            case 'done':\r\n                return items.filter((item: IToDoItem) => item.done);\r\n\r\n            case 'all':\r\n            default:\r\n                return items;\r\n        }\r\n    }\r\n\r\n    search(items: IToDoItem[], term: string): IToDoItem[] {\r\n        return items.filter((item: IToDoItem) => {\r\n                if (term.length === 0) {\r\n                    return items;\r\n                }\r\n\r\n                return item.label.toLowerCase().indexOf(term.toLowerCase()) > -1;\r\n            }\r\n        )\r\n    }\r\n\r\n    deleteItem = ( id : string ) : void => {\r\n        this.setState(( { toDoData } ) => {\r\n            return { toDoData: toDoData.filter(( element: IToDoItem ) => element.id !== id) };\r\n        });\r\n    };\r\n\r\n    // toggleProperty = (\r\n    //     arr: IToDoItem[],\r\n    //     id: string,\r\n    //     propName: string,\r\n    // ): IToDoItem[] => arr.map(element => {\r\n    //     if (element.id === id) {\r\n    //         return {\r\n    //             ...element,\r\n    //             [propName]: !element[propName],\r\n    //         };\r\n    //     }\r\n    //\r\n    //     return { ...element };\r\n    // });\r\n\r\n    // onToggleDone = (id: string): void => {\r\n    //     this.setState(({ toDoData }) => {\r\n    //         return {\r\n    //             toDoData: this.toggleProperty(toDoData, id, 'done')\r\n    //         }\r\n    //     })\r\n    // };\r\n\r\n    onSearchChange = (): void => this.setState({});\r\n\r\n    onFilterChange = (filter: string): void => this.setState({ filter });\r\n\r\n    render(): JSX.Element {\r\n        const { toDoData, filter } = this.state;\r\n\r\n        // const visibleItems: IToDoItem[] = this.filter( this.search(toDoData, ''), filter);\r\n\r\n        const doneCount = toDoData.filter(element => element.done).length;\r\n\r\n        const toDoCount: number = toDoData.length - doneCount;\r\n\r\n        return(\r\n            <div>\r\n                <AppHeader toDo={toDoCount} done={doneCount} />\r\n                <SearchPanel />\r\n                <ItemStatusFilter\r\n                    filter={filter}\r\n                    onFilterChange={this.onFilterChange}\r\n                />\r\n                <ItemAddForm />\r\n                <TodoList />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//onAddItem={this.onAddItem}"]},"metadata":{},"sourceType":"module"}