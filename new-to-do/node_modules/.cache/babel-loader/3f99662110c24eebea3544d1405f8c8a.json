{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\WebstormProjects\\\\jsProjects\\\\new-to-do\\\\src\\\\components\\\\app\\\\component.tsx\";\nimport React from 'react';\nimport { AppHeader } from '../app-header';\nimport { ItemStatusFilter } from '../item-status-filter';\nimport { SearchPanel } from '../search-panel';\nimport { ItemAddForm } from '../item-add-form';\nimport { TodoList } from '../todo-list';\nexport class App extends React.Component {\n  //  maxId: number = 100;\n  // createTodoItem = (label: string): IToDoItem => ({\n  //     label,\n  //     important: false,\n  //     done: false,\n  //     id: this.maxId++\n  // });\n  // state: IState = {\n  //     toDoData: [\n  //         this.createTodoItem('Setup React project ToDo List'),\n  //         this.createTodoItem('Rewrite ToDo list with typescript'),\n  //         this.createTodoItem('Create tests with Jest and Enzyme'),\n  //     ],\n  //     filter: 'active',\n  // };\n  // onAddItem = (text: string): void => {\n  //     const newItem = this.createTodoItem(text);\n  //\n  //     this.setState(({ toDoData }) => {\n  //         return {\n  //             toDoData: [newItem, ...toDoData]\n  //         }\n  //     });\n  // };\n  // onToggleImportant = (id: string): void => this.setState( ({ toDoData }) => ({\n  //     toDoData: this.toggleProperty(toDoData, id, 'important'),\n  // }));\n  // filter(items : IToDoItem[], filter: string) : IToDoItem[] {\n  //     switch (filter) {\n  //         case 'active':\n  //             return items.filter((item: IToDoItem) => !item.done);\n  //\n  //         case 'done':\n  //             return items.filter((item: IToDoItem) => item.done);\n  //\n  //         case 'all':\n  //         default:\n  //             return items;\n  //     }\n  // }\n  //\n  // search(items: IToDoItem[], term: string): IToDoItem[] {\n  //     return items.filter((item: IToDoItem) => {\n  //             if (term.length === 0) {\n  //                 return items;\n  //             }\n  //\n  //             return item.label.toLowerCase().indexOf(term.toLowerCase()) > -1;\n  //         }\n  //     )\n  // }\n  // deleteItem = ( id : string ) : void => {\n  //     this.setState(( { toDoData } ) => {\n  //         return { toDoData: toDoData.filter(( element: IToDoItem ) => element.id !== id) };\n  //     });\n  // };\n  // toggleProperty = (\n  //     arr: IToDoItem[],\n  //     id: string,\n  //     propName: string,\n  // ): IToDoItem[] => arr.map(element => {\n  //     if (element.id === id) {\n  //         return {\n  //             ...element,\n  //             [propName]: !element[propName],\n  //         };\n  //     }\n  //\n  //     return { ...element };\n  // });\n  // onToggleDone = (id: string): void => {\n  //     this.setState(({ toDoData }) => {\n  //         return {\n  //             toDoData: this.toggleProperty(toDoData, id, 'done')\n  //         }\n  //     })\n  // };\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(AppHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(SearchPanel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(ItemStatusFilter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(ItemAddForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(TodoList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }));\n  }\n\n} //onAddItem={this.onAddItem}","map":{"version":3,"sources":["C:/Users/user/WebstormProjects/jsProjects/new-to-do/src/components/app/component.tsx"],"names":["React","AppHeader","ItemStatusFilter","SearchPanel","ItemAddForm","TodoList","App","Component","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,SAASC,WAAT,QAA4B,iBAA5B;AAEA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,OAAO,MAAMC,GAAN,SAAkBN,KAAK,CAACO,SAAxB,CAA6C;AAElD;AAEE;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,MAAM,GAAgB;AAClB,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAKI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ;AASH;;AAlG+C,C,CAoGpD","sourcesContent":["import React from 'react';\r\nimport { AppHeader } from '../app-header'\r\nimport { ItemStatusFilter } from '../item-status-filter';\r\nimport { SearchPanel } from '../search-panel';\r\nimport { IPropsApp } from './app-types';\r\nimport { ItemAddForm } from '../item-add-form';\r\nimport { TodoList } from '../todo-list';\r\n\r\nexport class App extends React.Component<IPropsApp> {\r\n\r\n  //  maxId: number = 100;\r\n\r\n    // createTodoItem = (label: string): IToDoItem => ({\r\n    //     label,\r\n    //     important: false,\r\n    //     done: false,\r\n    //     id: this.maxId++\r\n    // });\r\n\r\n    // state: IState = {\r\n    //     toDoData: [\r\n    //         this.createTodoItem('Setup React project ToDo List'),\r\n    //         this.createTodoItem('Rewrite ToDo list with typescript'),\r\n    //         this.createTodoItem('Create tests with Jest and Enzyme'),\r\n    //     ],\r\n    //     filter: 'active',\r\n    // };\r\n\r\n    // onAddItem = (text: string): void => {\r\n    //     const newItem = this.createTodoItem(text);\r\n    //\r\n    //     this.setState(({ toDoData }) => {\r\n    //         return {\r\n    //             toDoData: [newItem, ...toDoData]\r\n    //         }\r\n    //     });\r\n    // };\r\n\r\n    // onToggleImportant = (id: string): void => this.setState( ({ toDoData }) => ({\r\n    //     toDoData: this.toggleProperty(toDoData, id, 'important'),\r\n    // }));\r\n\r\n    // filter(items : IToDoItem[], filter: string) : IToDoItem[] {\r\n    //     switch (filter) {\r\n    //         case 'active':\r\n    //             return items.filter((item: IToDoItem) => !item.done);\r\n    //\r\n    //         case 'done':\r\n    //             return items.filter((item: IToDoItem) => item.done);\r\n    //\r\n    //         case 'all':\r\n    //         default:\r\n    //             return items;\r\n    //     }\r\n    // }\r\n    //\r\n    // search(items: IToDoItem[], term: string): IToDoItem[] {\r\n    //     return items.filter((item: IToDoItem) => {\r\n    //             if (term.length === 0) {\r\n    //                 return items;\r\n    //             }\r\n    //\r\n    //             return item.label.toLowerCase().indexOf(term.toLowerCase()) > -1;\r\n    //         }\r\n    //     )\r\n    // }\r\n\r\n    // deleteItem = ( id : string ) : void => {\r\n    //     this.setState(( { toDoData } ) => {\r\n    //         return { toDoData: toDoData.filter(( element: IToDoItem ) => element.id !== id) };\r\n    //     });\r\n    // };\r\n\r\n    // toggleProperty = (\r\n    //     arr: IToDoItem[],\r\n    //     id: string,\r\n    //     propName: string,\r\n    // ): IToDoItem[] => arr.map(element => {\r\n    //     if (element.id === id) {\r\n    //         return {\r\n    //             ...element,\r\n    //             [propName]: !element[propName],\r\n    //         };\r\n    //     }\r\n    //\r\n    //     return { ...element };\r\n    // });\r\n\r\n    // onToggleDone = (id: string): void => {\r\n    //     this.setState(({ toDoData }) => {\r\n    //         return {\r\n    //             toDoData: this.toggleProperty(toDoData, id, 'done')\r\n    //         }\r\n    //     })\r\n    // };\r\n\r\n    render(): JSX.Element {\r\n        return(\r\n            <div>\r\n                <AppHeader />\r\n                <SearchPanel />\r\n                <ItemStatusFilter />\r\n                <ItemAddForm />\r\n                <TodoList />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//onAddItem={this.onAddItem}"]},"metadata":{},"sourceType":"module"}