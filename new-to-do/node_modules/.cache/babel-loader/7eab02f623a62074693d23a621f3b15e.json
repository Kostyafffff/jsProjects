{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\user\\\\WebstormProjects\\\\jsProjects\\\\new-to-do\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\WebstormProjects\\\\jsProjects\\\\new-to-do\\\\src\\\\components\\\\app\\\\App.tsx\";\nimport * as React from 'react';\nimport { Component } from 'react';\nimport { AppHeader } from '../app-header/app-header';\nimport { ItemStatusFilter } from '../item-status-filter/item-status-filter';\nimport { SearchPanel } from '../search-panel';\nimport { ToDoList } from '../todo-list/todo-list';\nimport { ItemAddForm } from \"../item-add-form\";\nexport class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.maxId = 100;\n\n    this.createTodoItem = label => ({\n      label,\n      important: false,\n      done: false,\n      id: this.maxId++\n    });\n\n    this.onAddItem = text => {\n      const newItem = this.createTodoItem(text);\n      this.setState(({\n        toDoData\n      }) => {\n        return {\n          toDoData: [newItem, ...toDoData]\n        };\n      });\n    };\n\n    this.onToggleImportant = id => this.setState(({\n      toDoData\n    }) => ({\n      toDoData: this.toggleProperty(toDoData, id, 'important')\n    }));\n\n    this.deleteItem = id => {\n      this.setState(({\n        toDoData\n      }) => {\n        return {\n          toDoData: toDoData.filter(element => element.id !== id)\n        };\n      });\n    };\n\n    this.toggleProperty = (arr, id, propName) => arr.map(element => {\n      if (element.id === id) {\n        return _objectSpread({}, element, {\n          [propName]: !element[propName]\n        });\n      }\n\n      return _objectSpread({}, element);\n    });\n\n    this.onToggleDone = id => {\n      this.setState(({\n        toDoData\n      }) => {\n        return {\n          toDoData: this.toggleProperty(toDoData, id, 'done')\n        };\n      });\n    };\n\n    this.onSearchChange = () => this.setState({});\n\n    this.onFilterChange = filter => this.setState({\n      filter\n    });\n  }\n\n  filter(items, filter) {\n    switch (filter) {\n      case 'active':\n        return items.filter(item => !item.done);\n\n      case 'done':\n        return items.filter(item => item.done);\n\n      case 'all':\n      default:\n        return items;\n    }\n  }\n\n  search(items, term) {\n    return items.filter(item => {\n      if (term.length === 0) {\n        return items;\n      }\n\n      return item.label.toLowerCase().indexOf(term.toLowerCase()) > -1;\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          toDoData = _this$state.toDoData,\n          filter = _this$state.filter;\n    const visibleItems = this.filter(this.search(toDoData, ''), filter);\n    const doneCount = toDoData.filter(element => element.done).length;\n    const toDoCount = toDoData.length - doneCount;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(AppHeader, {\n      toDo: toDoCount,\n      done: doneCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(SearchPanel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(ItemStatusFilter, {\n      filter: filter,\n      onFilterChange: this.onFilterChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(ItemAddForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(ToDoList, {\n      todos: visibleItems,\n      onDeleted: this.deleteItem,\n      onToggleImportant: this.onToggleImportant,\n      onToggleDone: this.onToggleDone,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }));\n  }\n\n} //onAddItem={this.onAddItem}","map":{"version":3,"sources":["C:/Users/user/WebstormProjects/jsProjects/new-to-do/src/components/app/App.tsx"],"names":["React","Component","AppHeader","ItemStatusFilter","SearchPanel","ToDoList","ItemAddForm","App","maxId","createTodoItem","label","important","done","id","onAddItem","text","newItem","setState","toDoData","onToggleImportant","toggleProperty","deleteItem","filter","element","arr","propName","map","onToggleDone","onSearchChange","onFilterChange","items","item","search","term","length","toLowerCase","indexOf","render","state","visibleItems","doneCount","toDoCount"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Component } from 'react';\r\nimport { AppHeader } from '../app-header/app-header'\r\nimport { ItemStatusFilter } from '../item-status-filter/item-status-filter';\r\nimport { SearchPanel } from '../search-panel';\r\nimport { ToDoList } from '../todo-list/todo-list';\r\nimport { IState, IToDoItem } from './app-types';\r\nimport {ItemAddForm} from \"../item-add-form\";\r\nexport class App extends Component<{}, IState> {\r\n\r\n    maxId: number = 100;\r\n\r\n    createTodoItem = (label: string): IToDoItem => ({\r\n        label,\r\n        important: false,\r\n        done: false,\r\n        id: this.maxId++\r\n    });\r\n\r\n    onAddItem = (text: string): void => {\r\n        const newItem = this.createTodoItem(text);\r\n\r\n        this.setState(({ toDoData }) => {\r\n            return {\r\n                toDoData: [newItem, ...toDoData]\r\n            }\r\n        });\r\n    };\r\n\r\n    onToggleImportant = (id: number): void => this.setState( ({ toDoData }) => ({\r\n        toDoData: this.toggleProperty(toDoData, id, 'important'),\r\n    }));\r\n\r\n    filter(items : IToDoItem[], filter: string) : IToDoItem[] {\r\n        switch (filter) {\r\n            case 'active':\r\n                return items.filter((item: IToDoItem) => !item.done);\r\n\r\n            case 'done':\r\n                return items.filter((item: IToDoItem) => item.done);\r\n\r\n            case 'all':\r\n\r\n            default:\r\n                return items;\r\n        }\r\n    }\r\n\r\n    search(items: IToDoItem[], term: string): IToDoItem[] {\r\n       return items.filter((item: IToDoItem) => {\r\n           if (term.length === 0) {\r\n               return items;\r\n           }\r\n\r\n           return item.label.toLowerCase().indexOf(term.toLowerCase()) > -1;\r\n          }\r\n       )\r\n    }\r\n\r\n    deleteItem = ( id : number ) : void => {\r\n        this.setState(( { toDoData } ) => {\r\n            return { toDoData: toDoData.filter(( element:  IToDoItem ) => element.id !== id) };\r\n        });\r\n    };\r\n\r\n    toggleProperty = (\r\n        arr: IToDoItem[],\r\n        id: number,\r\n        propName: string,\r\n    ): IToDoItem[] => arr.map(element => {\r\n        if (element.id === id) {\r\n            return {\r\n                ...element,\r\n                [propName]: !element[propName],\r\n            };\r\n        }\r\n\r\n        return { ...element };\r\n    });\r\n\r\n    onToggleDone = (id: number): void => {\r\n        this.setState(({ toDoData }) => {\r\n            return {\r\n                toDoData: this.toggleProperty(toDoData, id, 'done')\r\n            }\r\n        })\r\n    };\r\n\r\n    onSearchChange = (): void => this.setState({  });\r\n\r\n    onFilterChange = (filter: string): void => this.setState({ filter });\r\n\r\n    render(): JSX.Element {\r\n        const { toDoData, filter } = this.state;\r\n\r\n        const visibleItems: IToDoItem[] = this.filter( this.search(toDoData, ''), filter);\r\n\r\n        const doneCount = toDoData.filter(element => element.done).length;\r\n\r\n        const toDoCount: number = toDoData.length - doneCount;\r\n\r\n        return(\r\n            <div>\r\n                <AppHeader toDo={toDoCount} done={doneCount} />\r\n                <SearchPanel />\r\n                <ItemStatusFilter\r\n                    filter={filter}\r\n                    onFilterChange={this.onFilterChange}\r\n                />\r\n                <ItemAddForm />\r\n                <ToDoList\r\n                    todos={visibleItems}\r\n                    onDeleted={this.deleteItem}\r\n                    onToggleImportant={this.onToggleImportant}\r\n                    onToggleDone={this.onToggleDone}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//onAddItem={this.onAddItem}"]},"metadata":{},"sourceType":"module"}