{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\Users\\\\user\\\\WebstormProjects\\\\jsProjects\\\\new-to-do\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\WebstormProjects\\\\jsProjects\\\\new-to-do\\\\src\\\\components\\\\todo-list\\\\component.tsx\";\nimport * as React from 'react';\nimport './todo-list.css';\nimport { TodoListItem } from \"../todo-list-item/component\";\n\nconst filter = (items, filter) => {\n  switch (filter) {\n    case 'active':\n      return items.filter(item => !item.done);\n\n    case 'done':\n      return items.filter(item => item.done);\n\n    case 'all':\n    default:\n      return items;\n  }\n};\n\nconst search = (items, term) => {\n  return items.filter(item => {\n    if (term.length === 0) {\n      return items;\n    }\n\n    return item.label.toLowerCase().indexOf(term.toLowerCase()) > -1;\n  });\n};\n\nexport const TodoList = ({\n  todoList,\n  onDeleted,\n  onToggleImportant,\n  onToggleDone,\n  filterValue,\n  searchValue\n}) => {\n  const elements = filter(search(todoList, searchValue), filterValue).map(item => {\n    const id = item.id,\n          itemProps = _objectWithoutProperties(item, [\"id\"]);\n\n    return React.createElement(\"li\", {\n      key: id,\n      className: \"list-group-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(TodoListItem, Object.assign({}, itemProps, {\n      onDeleted: () => onDeleted(id),\n      onToggleImportant: () => onToggleImportant(id),\n      onToggleDone: () => onToggleDone(id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    })));\n  });\n  return React.createElement(\"ul\", {\n    className: \"list-group todo-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, elements); //make connect\n};","map":{"version":3,"sources":["C:/Users/user/WebstormProjects/jsProjects/new-to-do/src/components/todo-list/component.tsx"],"names":["React","TodoListItem","filter","items","item","done","search","term","length","label","toLowerCase","indexOf","TodoList","todoList","onDeleted","onToggleImportant","onToggleDone","filterValue","searchValue","elements","map","id","itemProps"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAO,iBAAP;AACA,SAASC,YAAT,QAA6B,6BAA7B;;AAGA,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAsBD,MAAtB,KAAuD;AAClE,UAAQA,MAAR;AACI,SAAK,QAAL;AACI,aAAOC,KAAK,CAACD,MAAN,CAAcE,IAAD,IAAqB,CAACA,IAAI,CAACC,IAAxC,CAAP;;AAEJ,SAAK,MAAL;AACI,aAAOF,KAAK,CAACD,MAAN,CAAcE,IAAD,IAAqBA,IAAI,CAACC,IAAvC,CAAP;;AAEJ,SAAK,KAAL;AACA;AACI,aAAOF,KAAP;AATR;AAWH,CAZD;;AAcA,MAAMG,MAAM,GAAG,CAACH,KAAD,EAAqBI,IAArB,KAAmD;AAC9D,SAAOJ,KAAK,CAACD,MAAN,CAAcE,IAAD,IAAqB;AACjC,QAAIG,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACnB,aAAOL,KAAP;AACH;;AAED,WAAOC,IAAI,CAACK,KAAL,CAAWC,WAAX,GAAyBC,OAAzB,CAAiCJ,IAAI,CAACG,WAAL,EAAjC,IAAuD,CAAC,CAA/D;AACH,GANE,CAAP;AAQH,CATD;;AAWA,OAAO,MAAME,QAAiC,GAAG,CAAC;AAC9CC,EAAAA,QAD8C;AAE9CC,EAAAA,SAF8C;AAG9CC,EAAAA,iBAH8C;AAI9CC,EAAAA,YAJ8C;AAK9CC,EAAAA,WAL8C;AAM9CC,EAAAA;AAN8C,CAAD,KAO9B;AACf,QAAMC,QAAQ,GAAGjB,MAAM,CAACI,MAAM,CAACO,QAAD,EAAWK,WAAX,CAAP,EAAgCD,WAAhC,CAAN,CAAmDG,GAAnD,CAAuDhB,IAAI,IAAI;AAAA,UACpEiB,EADoE,GAC/CjB,IAD+C,CACpEiB,EADoE;AAAA,UAC7DC,SAD6D,4BAC/ClB,IAD+C;;AAG5E,WACI;AAAI,MAAA,GAAG,EAAEiB,EAAT;AAAa,MAAA,SAAS,EAAC,iBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,YAAD,oBACQC,SADR;AAEI,MAAA,SAAS,EAAE,MAAYR,SAAS,CAACO,EAAD,CAFpC;AAGI,MAAA,iBAAiB,EAAE,MAAYN,iBAAiB,CAACM,EAAD,CAHpD;AAII,MAAA,YAAY,EAAE,MAAYL,YAAY,CAACK,EAAD,CAJ1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,CADJ;AAUH,GAbgB,CAAjB;AAeA,SACI;AAAI,IAAA,SAAS,EAAC,sBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,QADL,CADJ,CAhBe,CAqBf;AACH,CA7BM","sourcesContent":["import * as React from 'react';\r\n\r\nimport { TodoListProps } from './types-todo-list';\r\nimport './todo-list.css';\r\nimport { TodoListItem } from \"../todo-list-item/component\";\r\nimport {IToDoItem} from \"../app/app-types\";\r\n\r\nconst filter = (items : IToDoItem[], filter: string) : IToDoItem[] => {\r\n    switch (filter) {\r\n        case 'active':\r\n            return items.filter((item: IToDoItem) => !item.done);\r\n\r\n        case 'done':\r\n            return items.filter((item: IToDoItem) => item.done);\r\n\r\n        case 'all':\r\n        default:\r\n            return items;\r\n    }\r\n}\r\n\r\nconst search = (items: IToDoItem[], term: string): IToDoItem[] => {\r\n    return items.filter((item: IToDoItem) => {\r\n            if (term.length === 0) {\r\n                return items;\r\n            }\r\n\r\n            return item.label.toLowerCase().indexOf(term.toLowerCase()) > -1;\r\n        }\r\n    )\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({\r\n    todoList,\r\n    onDeleted,\r\n    onToggleImportant,\r\n    onToggleDone,\r\n    filterValue,\r\n    searchValue,\r\n}): JSX.Element => {\r\n    const elements = filter(search(todoList, searchValue), filterValue).map(item => {\r\n        const { id, ...itemProps } = item;\r\n\r\n        return (\r\n            <li key={id} className=\"list-group-item\">\r\n                <TodoListItem\r\n                    {...itemProps}\r\n                    onDeleted={(): void => onDeleted(id)}\r\n                    onToggleImportant={(): void => onToggleImportant(id)}\r\n                    onToggleDone={(): void => onToggleDone(id)}\r\n                />\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <ul className=\"list-group todo-list\">\r\n            {elements}\r\n        </ul>\r\n    );\r\n    //make connect\r\n};\r\n"]},"metadata":{},"sourceType":"module"}