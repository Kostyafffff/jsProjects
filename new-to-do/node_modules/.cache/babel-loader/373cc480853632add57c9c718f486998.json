{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\user\\\\WebstormProjects\\\\jsProjects\\\\new-to-do\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { initialStore } from '../store/store';\nimport * as actions from '../actions/constants';\nimport uuid from 'uuid/v4';\nexport const reducer = (store = initialStore, action) => {\n  switch (action.type) {\n    case actions.SET_SEARCH_VALUE:\n      return onSetSearchValue(store, action);\n\n    case actions.SET_ADD_FIELD_VALUE:\n      return onSetAddFieldValue(store, action);\n\n    case actions.ADD_TODO_ITEM:\n      return onAddItem(store, action);\n\n    case actions.TOGGLE_IMPORTANT_ITEM:\n      return onToggleImportant(store, action);\n\n    case actions.DELETE_TODO_ITEM:\n      return onDeleteToDoItem(store, action);\n\n    default:\n      return store;\n  }\n};\nexport const onSetSearchValue = (store, action) => _objectSpread({}, store, {\n  searchField: action.payload\n});\nexport const onSetAddFieldValue = (store, action) => _objectSpread({}, store, {\n  addField: action.payload\n});\nexport const onAddItem = (store, action) => _objectSpread({}, store, {\n  todoList: [...store.todoList, {\n    label: action.payload,\n    important: false,\n    done: false,\n    id: uuid()\n  }]\n});\nexport const onDeleteToDoItem = (store, action) => _objectSpread({}, store, {\n  todoList: [...store.todoList, {\n    label: action.payload,\n    important: false,\n    done: false,\n    id: uuid()\n  }]\n});\n\nconst toggleProperty = (arr, id, propName) => arr.map(element => {\n  if (element.id === id) {\n    return _objectSpread({}, element, {\n      [propName]: !element[propName]\n    });\n  }\n\n  return _objectSpread({}, element);\n});\n\nexport const onToggleImportant = (store, action) => _objectSpread({}, store, {\n  todoList: toggleProperty(store.todoList, action.payload, 'important')\n});\nexport const onToggleDone = (store, action) => _objectSpread({}, store, {\n  todoList: toggleProperty(store.todoList, action.payload, 'done')\n});","map":{"version":3,"sources":["C:/Users/user/WebstormProjects/jsProjects/new-to-do/src/redux/reducers/reducers.ts"],"names":["initialStore","actions","uuid","reducer","store","action","type","SET_SEARCH_VALUE","onSetSearchValue","SET_ADD_FIELD_VALUE","onSetAddFieldValue","ADD_TODO_ITEM","onAddItem","TOGGLE_IMPORTANT_ITEM","onToggleImportant","DELETE_TODO_ITEM","onDeleteToDoItem","searchField","payload","addField","todoList","label","important","done","id","toggleProperty","arr","propName","map","element","onToggleDone"],"mappings":";AAEA,SAASA,YAAT,QAA6B,gBAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,sBAAzB;AAGA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,OAAO,MAAMC,OAAqC,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACnF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKL,OAAO,CAACM,gBAAb;AACI,aAAOC,gBAAgB,CAACJ,KAAD,EAAQC,MAAR,CAAvB;;AAEJ,SAAKJ,OAAO,CAACQ,mBAAb;AACI,aAAOC,kBAAkB,CAACN,KAAD,EAAQC,MAAR,CAAzB;;AAEJ,SAAMJ,OAAO,CAACU,aAAd;AACI,aAAOC,SAAS,CAACR,KAAD,EAAQC,MAAR,CAAhB;;AAEJ,SAAKJ,OAAO,CAACY,qBAAb;AACI,aAAOC,iBAAiB,CAACV,KAAD,EAAQC,MAAR,CAAxB;;AAEJ,SAAKJ,OAAO,CAACc,gBAAb;AACI,aAAOC,gBAAgB,CAACZ,KAAD,EAAQC,MAAR,CAAvB;;AACJ;AACI,aAAOD,KAAP;AAhBR;AAkBH,CAnBM;AAqBP,OAAO,MAAMI,gBAAgB,GAAG,CAACJ,KAAD,EAAgBC,MAAhB,uBACzBD,KADyB;AAE5Ba,EAAAA,WAAW,EAAEZ,MAAM,CAACa;AAFQ,EAAzB;AAKP,OAAO,MAAMR,kBAAkB,GAAG,CAACN,KAAD,EAAgBC,MAAhB,uBAC3BD,KAD2B;AAE9Be,EAAAA,QAAQ,EAAEd,MAAM,CAACa;AAFa,EAA3B;AAKP,OAAO,MAAMN,SAAS,GAAG,CAACR,KAAD,EAAgBC,MAAhB,uBAClBD,KADkB;AAErBgB,EAAAA,QAAQ,EAAG,CAAC,GAAGhB,KAAK,CAACgB,QAAV,EAAoB;AAC3BC,IAAAA,KAAK,EAAEhB,MAAM,CAACa,OADa;AAE3BI,IAAAA,SAAS,EAAE,KAFgB;AAG3BC,IAAAA,IAAI,EAAE,KAHqB;AAI3BC,IAAAA,EAAE,EAAEtB,IAAI;AAJmB,GAApB;AAFU,EAAlB;AAUP,OAAO,MAAMc,gBAAgB,GAAG,CAACZ,KAAD,EAAgBC,MAAhB,uBACzBD,KADyB;AAE5BgB,EAAAA,QAAQ,EAAE,CAAC,GAAGhB,KAAK,CAACgB,QAAV,EAAoB;AAC1BC,IAAAA,KAAK,EAAEhB,MAAM,CAACa,OADY;AAE1BI,IAAAA,SAAS,EAAE,KAFe;AAG1BC,IAAAA,IAAI,EAAE,KAHoB;AAI1BC,IAAAA,EAAE,EAAEtB,IAAI;AAJkB,GAApB;AAFkB,EAAzB;;AAUP,MAAMuB,cAAc,GAAG,CACnBC,GADmB,EAEnBF,EAFmB,EAGnBG,QAHmB,KAIID,GAAG,CAACE,GAAJ,CAAQC,OAAO,IAAI;AAC1C,MAAIA,OAAO,CAACL,EAAR,KAAeA,EAAnB,EAAuB;AACnB,6BACOK,OADP;AAEI,OAACF,QAAD,GAAY,CAACE,OAAO,CAACF,QAAD;AAFxB;AAIH;;AAED,2BAAYE,OAAZ;AACH,CAT0B,CAJ3B;;AAeA,OAAO,MAAMf,iBAAiB,GAAG,CAACV,KAAD,EAAgBC,MAAhB,uBAC1BD,KAD0B;AAE7BgB,EAAAA,QAAQ,EAAEK,cAAc,CAACrB,KAAK,CAACgB,QAAP,EAAiBf,MAAM,CAACa,OAAxB,EAAiC,WAAjC;AAFK,EAA1B;AAKP,OAAO,MAAMY,YAAY,GAAG,CAAC1B,KAAD,EAAgBC,MAAhB,uBACrBD,KADqB;AAExBgB,EAAAA,QAAQ,EAAEK,cAAc,CAACrB,KAAK,CAACgB,QAAP,EAAiBf,MAAM,CAACa,OAAxB,EAAiC,MAAjC;AAFA,EAArB","sourcesContent":["import {IStore, IStoreTodoListItem} from '../store/types';\r\nimport { Reducer } from \"redux\";\r\nimport { initialStore } from '../store/store';\r\nimport * as actions from '../actions/constants';\r\nimport { IAction, IActionBase } from \"../action-creators/types\";\r\n\r\nimport uuid from 'uuid/v4';\r\n\r\nexport const reducer: Reducer<IStore, IActionBase> = (store = initialStore, action) => {\r\n    switch (action.type) {\r\n        case actions.SET_SEARCH_VALUE:\r\n            return onSetSearchValue(store, action as IAction<string>);\r\n\r\n        case actions.SET_ADD_FIELD_VALUE:\r\n            return onSetAddFieldValue(store, action as IAction<string>);\r\n\r\n        case  actions.ADD_TODO_ITEM:\r\n            return onAddItem(store, action as IAction<string>);\r\n\r\n        case actions.TOGGLE_IMPORTANT_ITEM:\r\n            return onToggleImportant(store, action as IAction<string>);\r\n\r\n        case actions.DELETE_TODO_ITEM:\r\n            return onDeleteToDoItem(store, action as IAction<string>);\r\n        default:\r\n            return store;\r\n    }\r\n};\r\n\r\nexport const onSetSearchValue = (store: IStore, action: IAction<string>): IStore => ({\r\n    ...store,\r\n    searchField: action.payload,\r\n});\r\n\r\nexport const onSetAddFieldValue = (store: IStore, action: IAction<string>): IStore => ({\r\n    ...store,\r\n    addField: action.payload,\r\n});\r\n\r\nexport const onAddItem = (store: IStore, action: IAction<string>): IStore => ({\r\n    ...store,\r\n    todoList : [...store.todoList, {\r\n        label: action.payload,\r\n        important: false,\r\n        done: false,\r\n        id: uuid(),\r\n    }]\r\n});\r\n\r\nexport const onDeleteToDoItem = (store: IStore, action: IAction<string>): IStore => ({\r\n    ...store,\r\n    todoList: [...store.todoList, {\r\n        label: action.payload,\r\n        important: false,\r\n        done: false,\r\n        id: uuid(),\r\n    }]\r\n});\r\n\r\nconst toggleProperty = (\r\n    arr: IStoreTodoListItem[],\r\n    id: string,\r\n    propName: string,\r\n): IStoreTodoListItem[] => arr.map(element => {\r\n    if (element.id === id) {\r\n        return {\r\n            ...element,\r\n            [propName]: !element[propName],\r\n        };\r\n    }\r\n\r\n    return { ...element };\r\n});\r\n\r\nexport const onToggleImportant = (store: IStore, action: IAction<string>): IStore => <IStore>({\r\n    ...store,\r\n    todoList: toggleProperty(store.todoList, action.payload, 'important'),\r\n});\r\n\r\nexport const onToggleDone = (store: IStore, action: IAction<string>): IStore => <IStore>({\r\n    ...store,\r\n    todoList: toggleProperty(store.todoList, action.payload, 'done'),\r\n});\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}