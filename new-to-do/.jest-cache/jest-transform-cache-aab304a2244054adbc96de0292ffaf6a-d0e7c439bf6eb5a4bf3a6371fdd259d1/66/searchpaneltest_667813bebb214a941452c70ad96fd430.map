{"file":"C:\\Users\\user\\WebstormProjects\\jsProjects\\new-to-do\\test\\components\\search-panel\\search-panel.test.tsx","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,iCAA+B;AAC/B,qEAAmE;AACnE,gDAA0B;AAE1B,2CAA+B;AAE/B,QAAQ,CAAC,gDAAgD,EAAE;IACvD,kBAAkB;IAClB,eAAe;IACf,KAAK;IAEL,IAAM,KAAK,GAAsB;QAC7B,IAAI,EAAE,EAAE;QACR,cAAc,EAAE,eAAK,CAAC,IAAI,EAAE;KAC/B,CAAC;IAEF,UAAU,CAAC;QACP,eAAK,CAAC,YAAY,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE;QAE3C,OAAO;QACP,IAAM,OAAO,GAAG,cAAK,CAAC,oBAAC,0BAAW,eAAK,KAAK,EAAI,CAAC,CAAC;QAElD,MAAM,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE;QACtB,OAAO;QAEP,IAAM,IAAI,GAAG,iBAAiB,CAAC;QAE/B,IAAM,OAAO,GAAG,cAAK,CAAc,oBAAC,0BAAW,eAAK,KAAK,EAAG,CAAC,CAAC;QAE9D,MAAM;QACN,OAAO,CAAC,QAAQ,CAAE,EAAE,IAAI,MAAA,EAAE,CAAE,CAAC;QAE7B,KAAK,CAAC,cAAc,CAAE,IAAI,CAAE,CAAC;QAE7B,MAAM;QACN,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAEhD,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\user\\WebstormProjects\\jsProjects\\new-to-do\\test\\components\\search-panel\\search-panel.test.tsx"],"sourcesContent":["import { mount } from 'enzyme';\r\nimport { SearchPanel } from 'components/search-panel/search-panel';\r\nimport sinon from 'sinon';\r\nimport { IPropsSearchPanel } from \"../../../src/components/search-panel/types-search-panel\";\r\nimport * as React from 'react';\r\n\r\ndescribe('src/components/item-add-form/item-add-form.tsx', () => {\r\n    // const state = {\r\n    //     term: ''\r\n    // };\r\n\r\n    const props: IPropsSearchPanel = {\r\n        term: '',\r\n        onSearchChange: sinon.stub()\r\n    };\r\n\r\n    beforeEach(() => {\r\n        sinon.resetHistory();\r\n    });\r\n\r\n    it('should TodoListItemProps mount component', () => {\r\n\r\n        //Given\r\n        const wrapper = mount(<SearchPanel {...props} />);\r\n\r\n        expect(wrapper.isEmptyRender()).toBeFalsy();\r\n    });\r\n\r\n    it('onSearchChange test', () => {\r\n        //Given\r\n\r\n        const term = 'loremImpsumText';\r\n\r\n        const wrapper = mount<SearchPanel>(<SearchPanel {...props}/>);\r\n\r\n        //When\r\n        wrapper.setState( { term } );\r\n\r\n        props.onSearchChange( term );\r\n\r\n        //Then\r\n        expect(wrapper.state('term')).toEqual(term);\r\n\r\n    })\r\n});"],"version":3}