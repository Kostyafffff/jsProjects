{"file":"C:\\Users\\user\\WebstormProjects\\jsProjects\\new-to-do\\test\\components\\item-add-form\\item-add-form.test.tsx","mappings":";;;;;;;;;;;;;;;;AAAA,iCAA+B;AAC/B,gDAA2C;AAC3C,wEAAqE;AAErE,gDAA0B;AAE1B,QAAQ,CAAC,gDAAgD,EAAE;IACvD,IAAM,aAAa,GAAG,eAAK,CAAC,IAAI,EAAE,CAAC;IACnC,IAAM,KAAK,GAAsB;QAC5B,SAAS,EAAE,aAAa;KAC5B,CAAC;IAEF,UAAU,CAAC;QACP,eAAK,CAAC,YAAY,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE;QAC3C,IAAM,OAAO,GAAG,cAAK,CAAC,8BAAC,2BAAW,eAAK,KAAK,EAAI,CAAC,CAAC;QAElD,MAAM,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,eAAe,EAAE;QAChB,OAAO;QACP,IAAM,OAAO,GAAG,cAAK,CAAc,8BAAC,2BAAW,eAAK,KAAK,EAAG,CAAC,CAAC;QAC9D,OAAO,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAC7B,IAAA,sCAAQ,CAAwB;QACxC,IAAM,kBAAkB,GAAG,eAAK,CAAC,IAAI,EAAE,CAAC;QACxC,IAAM,KAAK,yBACJ,IAAI,KAAK,CAAC,MAAM,CAAC,KACpB,cAAc,EAAE,kBAAkB,GACrC,CAAC;QAEF,MAAM;QACN,QAAQ,CAAC,KAAoD,CAAC,CAAC;QAE/D,MAAM;QACN,MAAM,CAAC,kBAAkB,CAAC,qBAAqB,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC;QAChE,MAAM,CAAC,aAAa,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QAClE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,eAAe,EAAE;QAChB,OAAO;QACP,IAAM,OAAO,GAAG,cAAK,CAAc,8BAAC,2BAAW,eAAK,KAAK,EAAG,CAAC,CAAC;QAC9D,OAAO,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;QACxB,IAAA,gDAAa,CAAwB;QAC7C,IAAM,OAAO,GAAG;YACd,MAAM,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE;SAC7B,CAAC;QAEF,MAAM;QACN,aAAa,CAAC,OAAmD,CAAC,CAAC;QAEnE,MAAM;QACN,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,QAAQ,CAAC,CAAA;AAChB,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\user\\WebstormProjects\\jsProjects\\new-to-do\\test\\components\\item-add-form\\item-add-form.test.tsx"],"sourcesContent":["import { mount } from 'enzyme';\r\nimport React, { ChangeEvent } from 'react';\r\nimport { ItemAddForm } from 'components/item-add-form/item-add-form';\r\nimport { IPropsItemAddForm } from 'components/item-add-form/types-item-add-form';\r\nimport sinon from 'sinon';\r\n\r\ndescribe('src/components/item-add-form/item-add-form.tsx', () => {\r\n    const onAddItemStub = sinon.stub();\r\n    const props: IPropsItemAddForm = {\r\n         onAddItem: onAddItemStub,\r\n    };\r\n\r\n    beforeEach(() => {\r\n        sinon.resetHistory();\r\n    });\r\n\r\n    it('should TodoListItemProps mount component', () => {\r\n        const wrapper = mount(<ItemAddForm {...props} />);\r\n\r\n        expect(wrapper.isEmptyRender()).toBeFalsy();\r\n    });\r\n\r\n    it('onSubmit test', () => {\r\n        //Given\r\n        const wrapper = mount<ItemAddForm>(<ItemAddForm {...props}/>);\r\n        wrapper.setState({ label: 'label' });\r\n        const { onSubmit } = wrapper.instance();\r\n        const preventDefaultStub = sinon.stub();\r\n        const event = {\r\n            ...new Event('form'),\r\n            preventDefault: preventDefaultStub,\r\n        };\r\n\r\n        //When\r\n        onSubmit(event as unknown as React.FormEvent<HTMLFormElement>);\r\n\r\n        //Then\r\n        expect(preventDefaultStub.calledOnceWithExactly()).toBeTruthy();\r\n        expect(onAddItemStub.calledOnceWithExactly('label')).toBeTruthy();\r\n        expect(wrapper.state('label')).toEqual('');\r\n    });\r\n\r\n    it('onLabelChange', () => {\r\n        //Given\r\n        const wrapper = mount<ItemAddForm>(<ItemAddForm {...props}/>);\r\n        wrapper.setState({ label: '' });\r\n        const { onLabelChange } = wrapper.instance();\r\n        const element = {\r\n          target: { value: 'myValue' }\r\n        };\r\n\r\n        //When\r\n        onLabelChange(element as unknown as ChangeEvent<HTMLInputElement>);\r\n\r\n        //Then\r\n        expect(wrapper.state().label).toEqual('myValue');\r\n    });\r\n\r\n    it('should')\r\n});\r\n"],"version":3}