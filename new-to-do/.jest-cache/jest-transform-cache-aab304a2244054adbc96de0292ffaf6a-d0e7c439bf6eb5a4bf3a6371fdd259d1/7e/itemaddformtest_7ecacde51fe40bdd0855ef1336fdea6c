35b999c215310d1e8b91bf7dad69d0af
"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var enzyme_1 = require("enzyme");
var react_1 = __importDefault(require("react"));
var item_add_form_1 = require("components/item-add-form/item-add-form");
var sinon_1 = __importDefault(require("sinon"));
describe('src/components/item-add-form/item-add-form.tsx', function () {
    var onAddItemStub = sinon_1.default.stub();
    var props = {
        onAddItem: onAddItemStub,
    };
    beforeEach(function () {
        sinon_1.default.resetHistory();
    });
    it('should TodoListItemProps mount component', function () {
        //When
        var wrapper = enzyme_1.mount(react_1.default.createElement(item_add_form_1.ItemAddForm, __assign({}, props)));
        //Then
        expect(wrapper.isEmptyRender()).toBeFalsy();
    });
    it('onSubmit test', function () {
        //Given
        var wrapper = enzyme_1.mount(react_1.default.createElement(item_add_form_1.ItemAddForm, __assign({}, props)));
        wrapper.setState({ label: 'label' });
        var onSubmit = wrapper.instance().onSubmit;
        var preventDefaultStub = sinon_1.default.stub();
        var event = __assign(__assign({}, new Event('form')), { preventDefault: preventDefaultStub });
        //When
        onSubmit(event);
        //Then
        expect(preventDefaultStub.calledOnceWithExactly()).toBeTruthy();
        expect(onAddItemStub.calledOnceWithExactly('label')).toBeTruthy();
        expect(wrapper.state('label')).toEqual('');
    });
    it('onLabelChange check', function () {
        //Given
        var wrapper = enzyme_1.mount(react_1.default.createElement(item_add_form_1.ItemAddForm, __assign({}, props)));
        wrapper.setState({ label: '' });
        var onLabelChange = wrapper.instance().onLabelChange;
        var element = {
            target: { value: 'myValue' }
        };
        //When
        onLabelChange(element);
        //Then
        expect(wrapper.state().label).toEqual('myValue');
    });
    // селекторы
    it.each(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n        expectedClass                                               | expectedLength\n        ", "                                         | ", "\n        ", "                                 | ", "\n        ", "                         | ", "\n        ", "                        | ", "\n        "], ["\n        expectedClass                                               | expectedLength\n        ", "                                         | ", "\n        ", "                                 | ", "\n        ", "                         | ", "\n        ", "                        | ", "\n        "])), '.item-add-form', 1, '.item-add-form-wrapper', 1, '.item-add-form-wrapper > input', 1, '.item-add-form-wrapper > button', 1)('should render in AppHeader $expectedClass', function (_a) {
        var expectedClass = _a.expectedClass, expectedLength = _a.expectedLength;
        var currentProps = __assign(__assign({}, props), { filter: 'active' });
        //When
        var wrapper = enzyme_1.mount(react_1.default.createElement(item_add_form_1.ItemAddForm, __assign({}, currentProps)));
        //Then
        expect(wrapper.find(expectedClass)).toHaveLength(expectedLength);
    });
    it('check placeholder text in add form', function () {
        //When
        var content = enzyme_1.shallow(react_1.default.createElement(item_add_form_1.ItemAddForm, __assign({}, props))).find('.item-add-form-wrapper > input');
        //Then
        expect(content).toHaveLength(1);
        expect(content.props().placeholder).toEqual('Needs to be Done');
    });
    it('check add button text', function () {
        //Given
        var content = enzyme_1.mount(react_1.default.createElement(item_add_form_1.ItemAddForm, __assign({}, props)));
        //When
        var button = content.find('.add-item-element');
        //Then
        expect(button.text()).toEqual('Add');
    });
});
var templateObject_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,