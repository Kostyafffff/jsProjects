{"file":"C:\\Users\\user\\WebstormProjects\\jsProjects\\new-to-do\\test\\components\\app-header\\app-header.test.tsx","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iCAA6B;AAC7B,gDAA0B;AAC1B,4EAAwE;AACxE,2CAA+B;AAG/B,QAAQ,CAAC,sCAAsC,EAAE;IAE7C,IAAM,KAAK,GAAW;QAClB,IAAI,EAAE,EAAE;QACR,IAAI,EAAE,EAAE;KACX,CAAC;IAEF,UAAU,CAAC;QACP,eAAK,CAAC,YAAY,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE;QACpB,MAAM;QACN,MAAM,CAAC,sBAAS,CAAC,CAAC,WAAW,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE;QAE3C,OAAO;QACP,IAAM,OAAO,GAAG,cAAK,CAAC,oBAAC,sBAAS,eAAK,KAAK,EAAI,CAAC,CAAC;QAEhD,MAAM,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,IAAI,kNAAA,8DAED,EAAa,YAAa,EAAC,YAC3B,EAAkB,OAAQ,EAAC,YAC3B,EAAkB,OAAQ,EAAC,mBAE5B,KAJC,aAAa,EAAa,CAAC,EAC3B,kBAAkB,EAAQ,CAAC,EAC3B,kBAAkB,EAAQ,CAAC,EAE3B,2CAA2C,EAAE,UAAC,EAA+B;YAA9B,gCAAa,EAAE,kCAAc;QAE9E,OAAO;QACP,IAAM,YAAY,gBACX,KAAK,CACX,CAAC;QAEF,MAAM;QACN,IAAM,OAAO,GAAG,cAAK,CAAC,oBAAC,sBAAS,eAAK,YAAY,EAAI,CAAC,CAAC;QAEvD,MAAM;QACN,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,IAAI,wZAAA,sFAED,EAAC,cAAe,EAAC,aAAc,EAAC,cAAe,EAAC,iBAChD,EAAG,YAAa,EAAG,WAAY,EAAG,YAAa,EAAG,iBAClD,EAAE,aAAc,EAAE,YAAa,EAAE,aAAc,EAAE,cACjD,EAAC,cAAe,EAAC,aAAc,EAAC,cAAe,EAAC,oBACrD,KAJK,CAAC,EAAe,CAAC,EAAc,CAAC,EAAe,CAAC,EAChD,GAAG,EAAa,GAAG,EAAY,GAAG,EAAa,GAAG,EAClD,CAAC,CAAC,EAAc,CAAC,CAAC,EAAa,CAAC,CAAC,EAAc,CAAC,CAAC,EACjD,CAAC,EAAe,CAAC,EAAc,CAAC,EAAe,CAAC,EACpD,yBAAyB,EAAE,UAAC,EAA0C;YAAxC,cAAI,EAAE,cAAI,EAAE,8BAAY,EAAE,8BAAY;QAEjE,OAAO;QACR,IAAM,YAAY,GAAW;YAC1B,IAAI,MAAA;YACJ,IAAI,MAAA;SACP,CAAC;QAED,MAAM;QACN,IAAM,OAAO,GAAG,cAAK,CAAC,oBAAE,sBAAS,eAAK,YAAY,EAAI,CAAC,CAAA;QAEvD,MAAM;QACN,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACnD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\user\\WebstormProjects\\jsProjects\\new-to-do\\test\\components\\app-header\\app-header.test.tsx"],"sourcesContent":["import {mount} from 'enzyme';\r\nimport sinon from 'sinon';\r\nimport {AppHeader} from '../../../src/components/app-header/app-header';\r\nimport * as React from 'react';\r\nimport {IProps} from '../../../src/components/app-header/types-app-header';\r\n\r\ndescribe('src/components/app-header/app-header', () => {\r\n\r\n    const props: IProps = {\r\n        toDo: '',\r\n        done: ''\r\n    };\r\n\r\n    beforeEach(() => {\r\n        sinon.resetHistory();\r\n    });\r\n\r\n    it('should be defined', () => {\r\n        //Then\r\n        expect(AppHeader).toBeDefined();\r\n    });\r\n\r\n    it('should TodoListItemProps mount component', () => {\r\n\r\n        //Given\r\n        const wrapper = mount(<AppHeader {...props} />);\r\n\r\n        expect(wrapper.isEmptyRender()).toBeFalsy();\r\n    });\r\n\r\n    it.each`\r\n        expectedClass           | expectedLength\r\n        ${'.app-header'}        | ${1}\r\n        ${'.app-header > h1'}   | ${1}\r\n        ${'.app-header > h2'}   | ${1}\r\n     \r\n        `('should render in AppHeader $expectedClass', ({expectedClass, expectedLength}) => {\r\n\r\n        //Given\r\n        const currentProps: IProps = {\r\n            ...props\r\n        };\r\n\r\n        //When\r\n        const wrapper = mount(<AppHeader {...currentProps} />);\r\n\r\n        //Then\r\n        expect(wrapper.find(expectedClass)).toHaveLength(expectedLength);\r\n    });\r\n\r\n    it.each`\r\n        toDoActual    | doneActual | toDoExpected  | doneExpected       \r\n        ${1}          | ${2}       |   ${1}        |   ${2}     \r\n        ${'1'}        | ${'2'}     |   ${'1'}      |   ${'1'}     \r\n        ${-1}         | ${-2}      |   ${-1}       |   ${-2}  \r\n        ${0}          | ${0}       |   ${0}        |   ${0}            \r\n    `('Should change AppHeader', ({ toDo, done, toDoExpected, doneExpected }) => {\r\n\r\n         //Given\r\n        const currentProps: IProps = {\r\n           toDo,\r\n           done\r\n       };\r\n\r\n        //When\r\n        const wrapper = mount(< AppHeader {...currentProps} />)\r\n\r\n        //Then\r\n        expect(wrapper.prop('toDo')).toEqual(toDoExpected);\r\n        expect(wrapper.prop('done')).toEqual(doneExpected);\r\n    })\r\n});"],"version":3}