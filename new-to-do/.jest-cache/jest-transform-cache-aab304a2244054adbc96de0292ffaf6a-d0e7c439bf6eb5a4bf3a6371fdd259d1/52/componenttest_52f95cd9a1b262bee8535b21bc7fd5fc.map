{"file":"C:\\Users\\user\\WebstormProjects\\jsProjects\\new-to-do\\test\\components\\app-header\\component.test.tsx","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA+B;AAC/B,iCAA+B;AAC/B,gDAA0B;AAE1B,6DAA4D;AAG5D,QAAQ,CAAC,sCAAsC,EAAE;IAE7C,IAAM,KAAK,GAAW;QAClB,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,MAAM;KACf,CAAC;IAEF,UAAU,CAAC;QACP,eAAK,CAAC,YAAY,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE;QACpB,MAAM;QACN,MAAM,CAAC,qBAAS,CAAC,CAAC,WAAW,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE;QAC3C,OAAO;QACP,IAAM,OAAO,GAAG,cAAK,CAAC,oBAAC,qBAAS,eAAK,KAAK,EAAI,CAAC,CAAC;QAEhD,MAAM;QACN,MAAM,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,IAAI,oMAAA,8DAED,EAAoB,KAAM,EAAC,YAC3B,EAAkB,OAAQ,EAAC,YAC3B,EAAkB,OAAQ,EAAC,YAC5B,KAHC,oBAAoB,EAAM,CAAC,EAC3B,kBAAkB,EAAQ,CAAC,EAC3B,kBAAkB,EAAQ,CAAC,EAC3B,2CAA2C,EAAE,UAAC,EAA+B;YAA9B,gCAAa,EAAE,kCAAc;QAE9E,OAAO;QACP,IAAM,YAAY,gBACX,KAAK,CACX,CAAC;QAEF,MAAM;QACN,IAAM,OAAO,GAAG,cAAK,CAAC,oBAAC,qBAAS,eAAK,YAAY,EAAI,CAAC,CAAC;QAEvD,MAAM;QACN,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;IAErE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,IAAI,uSAAA,8DAED,EAAe,KAAM,EAAG,WAAY,EAAG,aACvC,EAAe,KAAM,EAAI,UAAW,EAAG,aACvC,EAAe,KAAM,EAAI,UAAW,EAAK,aACzC,EAAe,KAAM,EAAI,UAAW,EAAI,aACxC,EAAe,KAAM,EAAQ,MAAO,EAAS,YAC/C,KALE,eAAe,EAAM,GAAG,EAAY,GAAG,EACvC,eAAe,EAAM,IAAI,EAAW,GAAG,EACvC,eAAe,EAAM,IAAI,EAAW,KAAK,EACzC,eAAe,EAAM,IAAI,EAAW,IAAI,EACxC,eAAe,EAAM,QAAQ,EAAO,SAAS,EAC9C,4CAA4C,EAAE,UAAC,EAAkB;YAAhB,UAAE,EAAE,cAAI,EAAE,cAAI;QAChE,IAAM,YAAY,GAAW;YACzB,IAAI,MAAA;YACJ,IAAI,MAAA;SACP,CAAC;QACF,IAAM,OAAO,GAAG,cAAK,CAAC,oBAAC,qBAAS,eAAM,YAAY,EAAK,CAAC,CAAC;QAEzD,MAAM;QACN,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAC1D,MAAM,CAAC,IAAI,GAAG,EAAE,GAAG,IAAI,CAAC;aACnB,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAExC,IAAM,KAAK,GAAW,EAAE,CAAC;QACzB,KAAK,CAAC,MAAM,CAAC;IACjB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\user\\WebstormProjects\\jsProjects\\new-to-do\\test\\components\\app-header\\component.test.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { mount } from 'enzyme';\r\nimport sinon from 'sinon';\r\n\r\nimport { AppHeader } from 'components/app-header/component';\r\nimport { IProps } from 'components/app-header/types-app-header';\r\n\r\ndescribe('src/components/app-header/app-header', () => {\r\n\r\n    const props: IProps = {\r\n        toDo: 'toDo',\r\n        done: 'done'\r\n    };\r\n\r\n    beforeEach(() => {\r\n        sinon.resetHistory();\r\n    });\r\n\r\n    it('should be defined', () => {\r\n        //Then\r\n        expect(AppHeader).toBeDefined();\r\n    });\r\n\r\n    it('should TodoListItemProps mount component', () => {\r\n        //Given\r\n        const wrapper = mount(<AppHeader {...props} />);\r\n\r\n        //Then\r\n        expect(wrapper.isEmptyRender()).toBeFalsy();\r\n    });\r\n\r\n    it.each`\r\n        expectedClass           | expectedLength\r\n        ${'.app-header.d-flex'} | ${1}\r\n        ${'.app-header > h1'}   | ${1}\r\n        ${'.app-header > h2'}   | ${1}\r\n        `('should render in AppHeader $expectedClass', ({expectedClass, expectedLength}) => {\r\n\r\n        //Given\r\n        const currentProps: IProps = {\r\n            ...props\r\n        };\r\n\r\n        //When\r\n        const wrapper = mount(<AppHeader {...currentProps} />);\r\n\r\n        //Then\r\n        expect(wrapper.find(expectedClass)).toHaveLength(expectedLength);\r\n\r\n    });\r\n\r\n    it.each`\r\n                h2         |toDo          | done\r\n        ${' more to do, '} | ${'2'}       | ${'1'} \r\n        ${' more to do, '} | ${'-2'}      | ${'0'} \r\n        ${' more to do, '} | ${'23'}      | ${'431'} \r\n        ${' more to do, '} | ${'43'}      | ${'50'} \r\n        ${' more to do, '} | ${'231213'}  | ${'3123213'} \r\n       `('should check text in AppHeader $h1 and $h2', ({ h2, toDo, done }) => {\r\n        const currentProps: IProps = {\r\n            toDo,\r\n            done\r\n        };\r\n        const wrapper = mount(<AppHeader { ...currentProps } />);\r\n\r\n        //When\r\n        expect(wrapper.find('h1').text()).toEqual('My ToDo List');\r\n        expect(toDo + h2 + done)\r\n            .toEqual(wrapper.find('h2').text());\r\n\r\n        const point: string = '';\r\n        point.length;\r\n    });\r\n});"],"version":3}